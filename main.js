(()=>{"use strict";var e={137:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,'*{padding:0;margin:0}button{padding:.5rem;margin-left:auto;margin-right:auto}body{height:100vh;background-color:#e0cbcb;display:grid;grid-template-columns:1fr 5fr;grid-template-rows:1fr 20fr;grid-template-areas:"header header" "nav main" "nav main" "nav main" "nav main" "nav main" "nav main" "nav main"}@media(max-width: 768px){body{grid-template-columns:5fr;grid-template-rows:1fr 3fr 20fr;grid-template-areas:"header header" "nav nav" "main main"}}.nav{background-color:#e58816;color:#393d3a;grid-area:nav;display:flex;flex-direction:column;gap:2em}.nav ul{background-color:#e58816}.nav li{display:flex;flex-direction:column;gap:2em;justify-content:flex-start;margin-top:4em}.nav #new-project{background-color:#62c1dd}.nav #new-project:hover{transform:scaleY(1.05);background-color:#38b0d4;cursor:pointer}.nav-options{background-color:#eca042;padding:.2em;padding-left:.6em;font-size:1.2rem}.nav-options:hover{cursor:pointer;background-color:#f6ce9e}.main{grid-area:main;display:flex;flex-direction:column;gap:1em;padding:1em}#add-to-do{border-radius:10px;height:2.5em;width:75%;margin:0 auto;display:flex;justify-content:center;align-items:center;background-color:#62c1dd}#add-to-do:hover{transform:scaleY(1.05);background-color:#38b0d4;cursor:pointer}.checkbox-container{display:flex;align-items:center;padding:.5em}.checkbox-container p{align-self:flex-end;justify-self:flex-end;margin-left:auto}.checkbox-container label{cursor:pointer;display:flex}.checkbox-container label::before{content:"";width:1em;height:1em;margin-right:.5em;border-radius:.15em;border:.05em solid #000}.checkbox-container label:hover::before{background-color:#62c1dd}.checkbox-container input[type=checkbox]{cursor:pointer;opacity:0;position:absolute}.checkbox-container input[type=checkbox]:hover+label::before{background-color:#62c1dd}.checkbox-container input[type=checkbox]:checked+label::before{content:"âœ”";background-color:#2793b2;display:flex;justify-content:center;align-items:center;color:#e0cbcb}.checkbox-container input[type=checkbox]:focus+label::before{box-shadow:0 0 20px #000}.header{grid-area:header}#todo-form{display:flex;flex-direction:column;gap:20px}#todo-form #for-date{max-width:70%;margin-top:1em;display:flex;gap:1em}#forms-container{justify-content:center;align-items:center;flex-direction:column;position:absolute;margin-left:auto;margin-right:auto;left:15%;right:0;top:35%;width:20rem;padding:2rem;background-color:#62c1dd;border-radius:20px}@media(max-width: 768px){#forms-container{left:0;right:0;padding:1.5rem}}#forms-container button{margin-top:2em;width:10em;background-color:#f1b770;padding:.5em;margin-left:-10px}#forms-container button:hover{cursor:pointer;background-color:#e58816}#forms-container .urgencies-container{display:flex;gap:.7em;margin-top:2em;justify-content:space-evenly;align-items:center}#forms-container .urgencies{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:.3em}#forms-container .urgencies:hover{cursor:pointer;transform:scale(1.05)}#forms-container #important-urgent{background-color:#f9f871}#forms-container #important-urgent:hover{background-color:#f5f30f}#forms-container #important{background-color:#88f9ba}#forms-container #important:hover{background-color:#27f482}#forms-container #urgent{background-color:#c65f95}#forms-container #urgent:hover{background-color:#8d3262}#forms-container #default{background-color:#96afb8}#forms-container #default:hover{background-color:#5e7f8a}#project-create-form{justify-content:center;align-items:center;flex-direction:column;position:absolute;margin-left:auto;margin-right:auto;left:15%;right:0;top:35%;width:20rem;padding:2rem;background-color:#62c1dd;border-radius:20px}@media(max-width: 768px){#project-create-form{left:0;right:0;padding:1.5rem}}#task-info{justify-content:center;align-items:center;flex-direction:column;position:absolute;margin-left:auto;margin-right:auto;left:15%;right:0;top:25%;width:20rem;height:20rem;padding:2rem;border:2px solid #000;background-color:#62c1dd;border-radius:20px}@media(max-width: 768px){#task-info{left:0;right:0;padding:1.5rem}}.more-details{padding-left:.5em;padding-right:.5em}.more-details:hover{cursor:pointer;background-color:rgba(0,0,0,.1)}.created{display:flex;gap:.5em}#text-details{display:grid;grid-template-rows:1fr 10fr 1fr 1fr;gap:.5em}#text-details #details{border-radius:12px;border:2px solid #000;resize:none;padding:.5em}',"",{version:3,sources:["webpack://./src/styles/styles.scss"],names:[],mappings:"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",sourcesContent:['$breakpoint-small: 768px;\n\n\n\n$bg: #fff;\n$rare: #62C1DD;\n$flare: rgb(224, 203, 203)\n;\n$pop: #F1B770;\n$default: #96AFB8;\n$important-urgent: #F9F871;\n$important: #88F9BA;\n$urgent: #C65F95;\n\n*{\n  padding: 0;\n  margin: 0;\n}\n\nbutton{\n  padding:0.5rem;\n  margin-left: auto;\n  margin-right:auto;\n}\n\nbody{\n  height: 100vh;\n  background-color: $flare;\n  display: grid;\n  grid-template-columns: 1fr 5fr;\n  grid-template-rows: 1fr 20fr;\n  grid-template-areas: \n  "header header"\n  "nav main"\n  "nav main"\n  "nav main"\n  "nav main"\n  "nav main"\n  "nav main"\n  "nav main";\n\n  @media (max-width: $breakpoint-small) {\n    grid-template-columns: 5fr;\n    grid-template-rows: 1fr 3fr 20fr;\n    grid-template-areas:\n    "header header"\n    "nav nav"\n    "main main"\n  }\n}\n\n.nav{\n  background-color: darken($pop,20%);\n  color: #393D3A;\n\n  grid-area:nav;\n  display:flex;\n  flex-direction: column;\n  gap:2em;\n\n  ul{\n    background-color: darken($pop,20%);\n  }\n  li{\n    display:flex;\n    flex-direction: column;\n    gap:2em;\n    justify-content: flex-start;\n    \n    margin-top:4em;\n  }\n  \n  #new-project{\n    background-color: $rare;\n    &:hover{\n      transform: scaleY(1.05);\n      background-color: darken($rare, 10%);\n      cursor: pointer;\n    }\n  }\n  \n}\n\n.nav-options{\n  background-color: darken($pop,10%);\n  padding:.2em;\n  padding-left:.6em;\n\n  font-size: 1.2rem;\n  &:hover{\n    cursor: pointer;\n    background-color: lighten($pop, 10%);\n  }\n}\n\n\n.main{\n  grid-area: main;\n  display:flex;\n  flex-direction: column;\n  gap:1em;\n  padding:1em;\n\n}\n#add-to-do{\n  border-radius:10px;\n  height:2.5em;\n  width:75%;\n  margin: 0 auto;\n  display:flex;\n  justify-content: center;\n  align-items: center;\n  background-color: $rare;\n\n  &:hover{\n    transform: scaleY(1.05);\n    background-color: darken($rare, 10%);\n    cursor: pointer;\n  }\n}\n\n  .checkbox-container{\n   display:flex;\n   align-items:center;\n   padding:0.5em;\n   \n    p{\n      align-self: flex-end;\n      justify-self: flex-end;\n      margin-left:auto;\n    }\n\n    label{\n      cursor: pointer;\n      display:flex;\n     &::before{\n       content: \'\';\n       width: 1em;\n       height: 1em;\n       margin-right: .5em;\n       border-radius: .15em;      \n       border: 0.05em solid black;\n\n      }\n     &:hover::before{\n       background-color: $rare;\n     }\n    }\n    input[type=\'checkbox\']{\n      cursor: pointer;\n      opacity: 0;\n      position: absolute;\n      \n      &:hover + label::before {\n        background-color: $rare;\n      }\n      &:checked + label::before{\n        content: \'\\002714\';\n        background-color: darken($rare, 20%);\n        display:flex;\n        justify-content: center;\n        align-items:center;\n        color: $flare;\n      }\n      &:focus + label::before {\n        box-shadow: 0 0 20px black;\n      }\n    }\n  }\n.header{\n  grid-area:header;\n}\n#todo-form{\n  display:flex;\n  flex-direction: column;\n  gap:20px;\n\n  #for-date{\n    max-width: 70%;\n    margin-top: 1em;\n    display:flex;\n    gap:1em;\n\n   \n  }\n}\n#forms-container{\n  justify-content: center;\n  align-items: center;\n  flex-direction: column; \n  position: absolute;\n  margin-left:auto;\n  margin-right:auto;\n\n  left:15%;\n  right:0;\n  top:35%;\n  width:20rem;\n  padding:2rem;\n  background-color: $rare;\n  border-radius: 20px;\n  @media (max-width: $breakpoint-small) {\n    left:0;\n    right:0;\n    \n    padding:1.5rem;\n\n  }\n\n  button{\n    margin-top:2em;\n    width:10em;\n    background-color: $pop;\n    padding:.5em;\n    margin-left: -10px;\n\n    \n    &:hover{\n      cursor: pointer;\n      background-color: darken($pop, 20%);\n    }\n  }\n\n  .urgencies-container{\n    display:flex;\n    gap:.7em;\n    margin-top:2em;\n    justify-content: space-evenly;\n    align-items: center;\n    \n\n  }\n  .urgencies{\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    padding:0.3em;\n    \n\n    \n\n    &:hover{\n      cursor:pointer;\n      transform:scale(1.05)\n    }\n  }\n  #important-urgent{\n    background-color:$important-urgent;\n    \n    \n    \n    \n    &:hover{\n      background-color: darken($important-urgent, 20%);\n    }\n  }\n  #important{\n    background-color: $important;\n    \n    \n    &:hover{\n      background-color: darken($important, 20%);\n    }\n  }\n  #urgent{\n    background-color: $urgent;\n    \n    \n    &:hover{\n      background-color: darken($urgent, 20%); \n    }\n  }\n  #default{ \n    background-color:$default;\n    \n    \n    &:hover{\n      background-color: darken($default, 20%);\n      }\n  }\n}\n\n#project-create-form{\n  justify-content: center;\n  align-items: center;\n  flex-direction: column; \n  position: absolute;\n  margin-left:auto;\n  margin-right:auto;\n  left:15%;\n  right:0;\n  top:35%;\n  width:20rem;\n  padding:2rem;\n\n  background-color: $rare;\n  border-radius: 20px;\n  @media (max-width: $breakpoint-small) {\n    left:0;\n    right:0;\n    \n    padding:1.5rem;\n\n  }\n\n}\n\n#task-info{\n  justify-content: center;\n  align-items: center;\n  flex-direction: column; \n  position: absolute;\n  margin-left:auto;\n  margin-right:auto;\n  left:15%;\n  right:0;\n  top:25%;\n  width:20rem;\n  height:20rem;\n  padding:2rem;\n  border: 2px solid black;\n\n  background-color: $rare;\n  border-radius: 20px;\n  @media (max-width: $breakpoint-small) {\n    left:0;\n    right:0;\n    \n    padding:1.5rem;\n\n  }\n}\n\n.more-details{\n  padding-left:0.5em;\n  padding-right:0.5em;\n\n  &:hover{\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, .10);\n  \n  }\n}\n\n.created{\n  display:flex;\n  gap:.5em;\n}\n\n#text-details{\n  display:grid;\n  grid-template-rows:1fr 10fr 1fr 1fr;\n  gap:0.5em;\n\n #details{\n   border-radius:12px;\n   border: 2px solid black;\n   resize:none;\n   padding:0.5em;\n }\n}'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],u=o[s]||0,A="".concat(s," ").concat(u);o[s]=u+1;var l=n(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==l)t[l].references++,t[l].updater(m);else{var f=a(m,r);r.byIndex=c,t.splice(c,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var d=r(e,a),s=0;s<o.length;s++){var u=n(o[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),o=n(569),i=n.n(o),c=n(565),d=n.n(c),s=n(216),u=n.n(s),A=n(589),l=n.n(A),m=n(137),f={};f.styleTagTransform=l(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const g=[],h=document.body,p=JSON.parse(localStorage.getItem("navBarArray")),C=e=>{const t=g;((e,t)=>{if(p&&e.length<p.length)for(let t=0;t<p.length;t++)e.push(p[t]);else e.push(t);var n;e.length>1&&(n=e,localStorage.setItem("navBarArray",JSON.stringify(n)))})(t,e);const n=document.getElementsByClassName("nav");for(let e=0;e<n.length;e++)n[e].remove();const r=document.createElement("div"),a=document.createElement("button");a.innerText="New Project",a.id="new-project",(()=>{const e=document.createElement("ul");r.appendChild(e),r.className="nav";for(let n=0;n<t.length;n++){const o=document.createElement("li");o.innerText=`${t[n]}`,o.id=`project${n}`,o.className="nav-options",e.appendChild(o),r.appendChild(a)}h.appendChild(r)})()};function b(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function v(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function w(e){v(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(e){v(1,arguments);var t=w(e);return t.setHours(0,0,0,0),t}var x=864e5;function k(e,t){v(2,arguments);var n=y(e),r=y(t),a=n.getTime()-b(n),o=r.getTime()-b(r);return Math.round((a-o)/x)}function B(e){return v(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function E(e){if(v(1,arguments),!B(e)&&"number"!=typeof e)return!1;var t=w(e);return!isNaN(Number(t))}var T={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function M(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const D={date:M({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:M({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:M({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var S={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function j(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var c=e.defaultWidth,d=a.width?String(a.width):e.defaultWidth;r=e.values[d]||e.values[c]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const P={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:j({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:j({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:j({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:j({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:j({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Y(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,c=o[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(d)?U(d,(function(e){return e.test(c)})):N(d,(function(e){return e.test(c)}));i=e.valueCallback?e.valueCallback(s):s,i=n.valueCallback?n.valueCallback(i):i;var u=t.slice(c.length);return{value:i,rest:u}}}function N(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function U(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var O,W={ordinalNumber:(O={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(O.matchPattern);if(!n)return null;var r=n[0],a=e.match(O.parsePattern);if(!a)return null;var o=O.valueCallback?O.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const F={code:"en-US",formatDistance:function(e,t,n){var r,a=T[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:D,formatRelative:function(e,t,n,r){return S[e]},localize:P,match:W,options:{weekStartsOn:0,firstWeekContainsDate:1}};function I(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function $(e,t){v(2,arguments);var n=w(e).getTime(),r=I(t);return new Date(n+r)}function L(e,t){v(2,arguments);var n=I(t);return $(e,-n)}var q=864e5;function z(e){v(1,arguments);var t=1,n=w(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function Q(e){v(1,arguments);var t=w(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=z(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=z(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function H(e){v(1,arguments);var t=Q(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=z(n);return r}var G=6048e5;function J(e,t){v(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:I(a),i=null==n.weekStartsOn?o:I(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=w(e),d=c.getUTCDay(),s=(d<i?7:0)+d-i;return c.setUTCDate(c.getUTCDate()-s),c.setUTCHours(0,0,0,0),c}function R(e,t){v(1,arguments);var n=w(e),r=n.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,c=null==i?1:I(i),d=null==a.firstWeekContainsDate?c:I(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=new Date(0);s.setUTCFullYear(r+1,0,d),s.setUTCHours(0,0,0,0);var u=J(s,t),A=new Date(0);A.setUTCFullYear(r,0,d),A.setUTCHours(0,0,0,0);var l=J(A,t);return n.getTime()>=u.getTime()?r+1:n.getTime()>=l.getTime()?r:r-1}function K(e,t){v(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:I(a),i=null==n.firstWeekContainsDate?o:I(n.firstWeekContainsDate),c=R(e,t),d=new Date(0);d.setUTCFullYear(c,0,i),d.setUTCHours(0,0,0,0);var s=J(d,t);return s}var X=6048e5;function _(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const Z=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return _("yy"===t?r%100:r,t.length)},V=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):_(n+1,2)},ee=function(e,t){return _(e.getUTCDate(),t.length)},te=function(e,t){return _(e.getUTCHours()%12||12,t.length)},ne=function(e,t){return _(e.getUTCHours(),t.length)},re=function(e,t){return _(e.getUTCMinutes(),t.length)},ae=function(e,t){return _(e.getUTCSeconds(),t.length)},oe=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return _(Math.floor(r*Math.pow(10,n-3)),t.length)};var ie={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Z(e,t)},Y:function(e,t,n,r){var a=R(e,r),o=a>0?a:1-a;return"YY"===t?_(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):_(o,t.length)},R:function(e,t){return _(Q(e),t.length)},u:function(e,t){return _(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return _(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return _(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return V(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return _(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){v(1,arguments);var n=w(e),r=J(n,t).getTime()-K(n,t).getTime();return Math.round(r/X)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):_(a,t.length)},I:function(e,t,n){var r=function(e){v(1,arguments);var t=w(e),n=z(t).getTime()-H(t).getTime();return Math.round(n/G)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):_(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ee(e,t)},D:function(e,t,n){var r=function(e){v(1,arguments);var t=w(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/q)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):_(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return _(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return _(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return _(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return te(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ne(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):_(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):_(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):re(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ae(e,t)},S:function(e,t){return oe(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return de(a);case"XXXX":case"XX":return se(a);default:return se(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return de(a);case"xxxx":case"xx":return se(a);default:return se(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+ce(a,":");default:return"GMT"+se(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+ce(a,":");default:return"GMT"+se(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return _(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return _((r._originalDate||e).getTime(),t.length)}};function ce(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+_(o,2)}function de(e,t){return e%60==0?(e>0?"-":"+")+_(Math.abs(e)/60,2):se(e,t)}function se(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+_(Math.floor(a/60),2)+n+_(a%60,2)}const ue=ie;function Ae(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function le(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const me={p:le,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return Ae(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Ae(a,t)).replace("{{time}}",le(o,t))}};var fe=["D","DD"],ge=["YY","YYYY"];function he(e){return-1!==fe.indexOf(e)}function pe(e){return-1!==ge.indexOf(e)}function Ce(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var be=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ve=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,we=/^'([^]*?)'?$/,ye=/''/g,xe=/[a-zA-Z]/;function ke(e,t,n){v(2,arguments);var r=String(t),a=n||{},o=a.locale||F,i=o.options&&o.options.firstWeekContainsDate,c=null==i?1:I(i),d=null==a.firstWeekContainsDate?c:I(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=o.options&&o.options.weekStartsOn,u=null==s?0:I(s),A=null==a.weekStartsOn?u:I(a.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var l=w(e);if(!E(l))throw new RangeError("Invalid time value");var m=b(l),f=L(l,m),g={firstWeekContainsDate:d,weekStartsOn:A,locale:o,_originalDate:l},h=r.match(ve).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,me[t])(e,o.formatLong,g):e})).join("").match(be).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return Be(n);var i=ue[r];if(i)return!a.useAdditionalWeekYearTokens&&pe(n)&&Ce(n,t,e),!a.useAdditionalDayOfYearTokens&&he(n)&&Ce(n,t,e),i(f,n,o.localize,g);if(r.match(xe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return h}function Be(e){return e.match(we)[1].replace(ye,"'")}function Ee(e,t){v(2,arguments);var n=w(e),r=I(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}class Te{constructor(e){this.listElement=document.getElementById("main"),this.textList=[],this.colorList=[],this.isChecked=[],this.dateAdded=[],this.textDetails=[],this.date=[],Object.assign(this,e)}static createBox(e){const t=document.createElement("input");return t.setAttribute("type","checkbox"),t.id=`cb${e}`,t}static createLabel(e,t){const n=document.createElement("label");return n.setAttribute("for",`cb${t}`),n.innerText=e,n}static createInfoSection(){const e=document.createElement("p");return e.className="more-details",e.innerText="More Details",e}static createDueDate(){const e=document.createElement("p");return e.innerText="Due Date Here",e}static createButton(){const e=document.createElement("button");return e.innerText="Add New To Do",e.id="add-to-do",e}static hideNewProject(){const e=document.getElementById("project-create-form");null!=e&&e.remove()}static hideExtraTaskInfo(){const e=document.getElementById("task-info"),t=document.getElementById("details"),n=document.getElementById("date-created");e.style.display="none",t.textContent="",n.textContent=""}displayFormButton(){const e=document.forms["todo-form"],t=document.getElementById("forms-container");document.getElementById("add-to-do").addEventListener("click",(()=>{Te.hideNewProject(),Te.hideExtraTaskInfo(),e.style.display="",t.style.display=""}))}update(){const e=document.getElementById("main");for(;e.firstChild;)e.removeChild(e.firstChild);for(let t=0;t<this.textList.length;t++){const n=document.createElement("div");n.className="checkbox-container",n.id=`checkdiv${t}`,n.append(Te.createBox(t),Te.createLabel(this.textList[t],t),Te.createInfoSection()),n.style.background=this.colorList[t],e.appendChild(n)}e.appendChild(Te.createButton()),this.displayFormButton(),this.wasTheCheckBoxChecked()}pushToArray(e,t,n){this.textList.push(e),this.isChecked.push(!1);const r=function(e,t,n){v(2,arguments);var r=w(e),a=w(t),o=n||{},i=o.locale,c=void 0===i?F:i,d=o.weekStartsOn,s=void 0===d?0:d;if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");if(!c.formatRelative)throw new RangeError("locale must contain formatRelative property");var u,A=k(r,a);if(isNaN(A))throw new RangeError("Invalid time value");u=A<-6?"other":A<-1?"lastWeek":A<0?"yesterday":A<1?"today":A<2?"tomorrow":A<7?"nextWeek":"other";var l=L(r,b(r)),m=L(a,b(a)),f=c.formatRelative(u,l,m,{locale:c,weekStartsOn:s});return ke(r,f,{locale:c,weekStartsOn:s})}(function(e,t){v(2,arguments);var n=I(t);return Ee(e,-n)}(new Date,0),new Date);this.dateAdded.push(r),this.textDetails.push(""),this.date.push(n.value),void 0===t&&(t="#96AFB8"),this.colorList.push(t),this.update()}removeElement(e){this.textList.splice(e,1),this.colorList.splice(e,1),this.isChecked.splice(e,1),this.date.splice(e,1),this.dateAdded.splice(e,1),this.textDetails.splice(e,1),this.update()}wasTheCheckBoxChecked(){for(let e=0;e<this.isChecked.length;e++)this.isChecked[e]&&document.getElementById(`cb${e}`).click()}}const Me=document.body,De=(e,t)=>{localStorage.setItem(`${e}`,JSON.stringify(t))};let Se="project0",je="getProject0";C("Stuff");const Pe=[],Ye=document.getElementsByClassName("nav-options"),Ne=[];for(let e=0;e<Ye.length;e++)Ne.push(`getProject${e}`);for(let e=0;e<g.length;e++)if(Pe.push(`project${e}`),g.length<e)window[Pe[e]]=new Te,De(`getProject${e}`,window[Pe[e]]);else{const t=JSON.parse(localStorage.getItem(`getProject${e}`));window[Pe[e]]=new Te(t)}window[Pe[0]].update(),Se=window[Pe[0]],je=Ne[0],console.log(je);const Ue=()=>{const e=document.getElementsByClassName("nav-options");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{const e=window[Pe[t]];e.update(),Se=e,je=Ne[t],We(),Le(),Ie()}))};Ue(),(()=>{const e=document.forms["todo-form"],t=document.getElementById("forms-container");document.getElementById("add-to-do").addEventListener("click",(()=>{ze(),e.style.display="",t.style.display=""}))})(),(()=>{const e=document.forms["todo-form"],t=document.getElementsByClassName("urgencies");let n=t[3];n.style.border="black 3px solid",n.style.margin="-3px";for(let e=0;e<t.length;e++)t[e].addEventListener("click",(()=>{n.style.border="none",n.style.margin="auto",n=t[e],n.style.border="black 3px solid",n.style.margin="-3px"}));e.addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("task").value;let r;r="important-urgent"===n.id?"#F9F871":"important"===n.id?"#88F9BA":"urgent"===n.id?"#C65F95":"#96AFB8",Se.pushToArray(t,r,date),Se.update(),De(je,Se),We(),qe(),Ie(),Le()}))})();const Oe=()=>{document.getElementById("new-project").addEventListener("click",(()=>{qe(),(()=>{qe(),Le(),ze();const e=document.createElement("form"),t=document.createElement("div"),n=document.createElement("label"),r=document.createElement("input"),a=document.createElement("button");a.textContent="Submit",e.id="project-creation",n.htmlFor="project-create",n.innerText="New Project Name:",n.id="project-create",r.type="text",t.id="project-create-form",t.append(n,r,a),e.appendChild(t),Me.appendChild(e),e.addEventListener("submit",(t=>{t.preventDefault(),((e,t)=>{C(e.value),Oe(),t.remove(),Ue();for(let e=0;e<g.length;e++)e===g.length-1&&(Pe.push(`project${e}`),window[Pe[e]]=new Te)})(r,e)}))})()}))};Oe();const We=()=>{for(let e=0;e<Se.textList.length;e++){const t=document.getElementById(`cb${e}`);t.addEventListener("click",(()=>{const n=t.checked;Se.isChecked[e]=!!n}))}};let Fe;const Ie=()=>{const e=document.getElementsByClassName("more-details");for(let t=0;t<Se.dateAdded.length;t++)e[t].addEventListener("click",(()=>{qe(),ze(),Le(),$e(Se.textDetails[t],Se.dateAdded[t],Se.date[t]),Fe=t}))};Ie();const $e=(e,t,n)=>{const r=document.getElementById("task-info"),a=document.getElementById("details"),o=document.getElementById("date-created"),i=document.getElementById("date-due");r.style.display="none",a.value="",o.textContent="",i.textContent="",r.style.display="",a.value=e,o.textContent=t,n.length>=3&&(i.innerText=`Due date: ${n}`)},Le=()=>{const e=document.getElementById("task-info"),t=document.getElementById("details"),n=document.getElementById("date-created");e.style.display="none",t.value="",n.textContent=""};Le(),(()=>{const e=document.getElementById("text-details"),t=document.getElementById("details");e.addEventListener("submit",(e=>{e.preventDefault(),Se.textDetails[Fe]=t.value,Le(),De(je,Se)}))})();const qe=()=>{const e=document.forms["todo-form"],t=document.getElementById("forms-container");e.style.display="none",t.style.display="none",e.reset()},ze=()=>{const e=document.getElementById("project-create-form");null!=e&&e.remove()};document.getElementById("delete").addEventListener("click",(()=>{Se.removeElement(Fe),De(je,Se),Ie(),Le()})),qe()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,